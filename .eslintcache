[{"C:\\Users\\cacut\\Desktop\\projects\\react\\javascript-calculator\\src\\index.js":"1","C:\\Users\\cacut\\Desktop\\projects\\react\\javascript-calculator\\src\\components\\Calculator.jsx":"2"},{"size":331,"mtime":1611980588024,"results":"3","hashOfConfig":"4"},{"size":4380,"mtime":1611976361128,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1mdxsi1",{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"C:\\Users\\cacut\\Desktop\\projects\\react\\javascript-calculator\\src\\index.js",["12"],"C:\\Users\\cacut\\Desktop\\projects\\react\\javascript-calculator\\src\\components\\Calculator.jsx",["13","14","15"],"import React, { Component } from 'react';\n\nconst numbersIDS=[\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\"];\nconst operatorsSymbols=[\"+\",\"-\",\"/\",\"*\"];\nconst operatorsIDS=[\"add\",\"subtract\",\"divide\",\"multiply\"];\n\nfunction checkIfHasTwoOP(str){\n   let strSplitted=str.split(\" \");\n   let removedSpaces=strSplitted.join(\"\");\n   return /[*+-/]-$/.test(removedSpaces);\n}\n\n\nfunction NumberButton(props){\n  return(\n    <button\n      id={numbersIDS[props.value]}\n      onClick={props.onClick}\n      className=\"number\"\n      >{props.value}\n    </button>\n  );\n}\n\nfunction OperatorButton(props){\n  return(\n    <button\n      id={operatorsIDS[props.value]}\n      onClick={props.onClick}\n      className=\"operator\"\n      >{operatorsSymbols[props.value]}\n    </button>\n  );\n}\n\nclass Calculator extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      current:'0',\n      history:'',\n    }\n    this.renderNumber=this.renderNumber.bind(this);\n    this.handleNumber=this.handleNumber.bind(this);\n    this.handleClear=this.handleClear.bind(this);\n    this.handleOperator=this.handleOperator.bind(this);\n    this.handleDecimal=this.handleDecimal.bind(this);\n    this.handleEquals=this.handleEquals.bind(this);\n  }\n\n\n  renderNumber(i){\n    return(\n      <NumberButton\n        onClick={()=>this.handleNumber(i)}\n        value={i} />\n    );\n  }\n\n  renderOperator(i){\n    return(\n      <OperatorButton\n        onClick={()=>this.handleOperator(i)}\n        value={i}\n        />\n    );\n  }\n\n  handleNumber(i){\n    let newCurrent=this.state.current;\n    let newHistory=this.state.history;\n\n    if(i===\".\" && (this.state.current===\"0\" || operatorsSymbols.indexOf(this.state.current)!==-1)){\n      newCurrent=\"0\";\n    } else if (this.state.current === (\"0\")||operatorsSymbols.indexOf(this.state.current)!==-1){\n      newCurrent = \"\";\n    }\n\n    if (this.state.history.includes(\"=\")) {\n      newHistory=\"\";\n      newCurrent=\"\";\n    }\n\n    this.setState({\n      current:newCurrent.concat(i.toString()),\n      history:newHistory\n    });\n  }\n\n  handleClear(){\n    this.setState({\n      current:\"0\",\n      history:\"\",\n    });\n  }\n\n  handleOperator(i){\n    let newHistory=this.state.history;\n    let hasAlreadyTwo = checkIfHasTwoOP(newHistory);\n\n    if (newHistory.includes(\"=\")){\n      newHistory=this.state.current+\" \"+operatorsSymbols[i]+\" \";\n    } else if (operatorsSymbols.indexOf(this.state.current)===-1){\n      newHistory+=this.state.current+\" \"+operatorsSymbols[i]+\" \";\n    } else if (operatorsSymbols[i]===\"-\" && !hasAlreadyTwo){\n      newHistory+=\" - \";\n    } else if (hasAlreadyTwo){\n      newHistory=newHistory.substring(0,newHistory.length-5)+operatorsSymbols[i]+\" \";\n    } else{\n      newHistory=newHistory.substring(0,newHistory.length-2)+operatorsSymbols[i]+\" \";\n    }\n\n    this.setState({\n      history:newHistory,\n      current:operatorsSymbols[i],\n    })\n  }\n\n  handleDecimal(){\n    if (this.state.current.includes(\".\")) return; /*avoids repetition of dots*/\n    this.handleNumber(\".\");\n  }\n\n  handleEquals(){\n    let newHistory=this.state.history;\n\n    if (operatorsSymbols.indexOf(this.state.current)!==-1){\n      newHistory+=\"0\"\n    }else{\n      newHistory+=this.state.current;\n    }\n\n    let result = eval(newHistory);\n\n    if (result===Infinity || (!result&&result!=0)){\n      result=\"ILLEGAL EXPRESSION\";\n    }\n\n    newHistory+=\" = \"+result;\n\n    this.setState({\n      history:newHistory,\n      current:result,\n    });\n  }\n\n  render(){\n    return(\n      <div id=\"calculator-container\">\n        {this.renderOperator(0)}\n        {this.renderOperator(1)}\n        {this.renderOperator(2)}\n        {this.renderOperator(3)}\n        {this.renderNumber(0)}\n        {this.renderNumber(1)}\n        {this.renderNumber(2)}\n        {this.renderNumber(3)}\n        {this.renderNumber(4)}\n        {this.renderNumber(5)}\n        {this.renderNumber(6)}\n        {this.renderNumber(7)}\n        {this.renderNumber(8)}\n        {this.renderNumber(9)}\n        <button id=\"equals\" onClick={this.handleEquals}>=</button>\n        <button id=\"decimal\" onClick={this.handleDecimal}>.</button>\n        <button id=\"clear\" onClick={this.handleClear}>AC</button>\n        <div id=\"display-container\">\n          <p id=\"history\">{this.state.history}</p>\n          <p id=\"display\">{this.state.current}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n",["16","17"],{"ruleId":"18","severity":1,"message":"19","line":6,"column":2,"nodeType":"20","messageId":"21","endLine":8,"endColumn":3},{"ruleId":"22","severity":1,"message":"23","line":1,"column":17,"nodeType":"24","messageId":"25","endLine":1,"endColumn":26},{"ruleId":"26","severity":1,"message":"27","line":133,"column":18,"nodeType":"28","messageId":"29","endLine":133,"endColumn":22},{"ruleId":"30","severity":1,"message":"31","line":135,"column":46,"nodeType":"32","messageId":"29","endLine":135,"endColumn":48},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-global-assign","no-unsafe-negation"]